git的定义：
版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统

在现有目录中初始化仓库：
git init

克隆现有的仓库：
git clone https://github.com/libgit2/libgit2 folder

请记住，你工作目录下的每一个文件都不外乎这两种状态：已跟踪或未跟踪。 
已跟踪的文件:是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，它们的状态可能处于未修改，已修改或已放入暂存区。 
工作目录中除已跟踪文件以外的所有其它文件都属于  ===> 未跟踪文件: 它们既不存在于上次快照的记录中，也没有放入暂存区。 初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态。

检查当前文件状态:
git status

跟踪新文件(将文件加入到暂存区):
git add newFile

忽略文件:
我们可以创建一个名为 .gitignore 的文件


提交更新：
git commit -m 'commit detail'

跳过使用暂存区域提交更新：
git commit -a -m 'commit detail'

Git 是怎么创建新分支的呢？ 很简单，它只是为你创建了一个可以移动的新的指针。

Git 又是怎么知道当前在哪一个分支上呢？ 也很简单，它有一个名为 HEAD 的特殊指针。 请注意它和许多其它版本控制系统（如 Subversion 或 CVS）里的 HEAD 概念完全不同。 在 Git 中，它是一个指针，指向当前所在的本地分支（译注：将 HEAD 想象为当前分支的别名）。

新建分支
git branch newBranch

分支切换
git checkout testing

删除分支
git branch -d hotfix

分支的合并
先切换到一需要合并到的分支，假如我要把test1合并到master分支，我们应该这样做：
git checkout master
git merge test1

遇到冲突时的分支合并
首先需要合并冲突
任何因包含合并冲突而有待解决的文件，都会以未合并状态标识出来。 Git 会在有冲突的文件中加入标准的冲突解决标记，这样你可以打开这些包含冲突的文件然后手动解决冲突。 出现冲突的文件会包含一些特殊区段，看起来像下面这个样子：
<<<<<< HEAD:index.html
<div id="footer">contact : email.support@github.com</div>
=======
<div id="footer">
 please contact us at support@github.com
</div>
>>>>>> iss53:index.html
这表示 HEAD 所指示的版本（也就是你的 master 分支所在的位置，因为你在运行 merge 命令的时候已经检出到了这个分支）在这个区段的上半部分（======= 的上半部分），而 iss53 分支所指示的版本在 ======= 的下半部分。 为了解决冲突，你必须选择使用由 ======= 分割的两部分中的一个，或者你也可以自行合并这些内容。
手动合并冲突之后需要将冲突的文件标记为已解决：
对每个文件使用 git add 命令来将其标记为冲突已解决。 一旦暂存这些原本有冲突的文件，Git 就会将它们标记为冲突已解决。


